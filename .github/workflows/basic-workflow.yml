name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: create res folder
        run: mkdir -p res/Data
      - name: decode data
        run: |
          echo '${{secrets.DATA1}}' | base64 -d > res/Data/Data_CH001_000.abf
          echo '${{secrets.DATA2}}' | base64 -d > res/Data/Data_CH002_000.abf
          echo '${{secrets.DATA3}}' | base64 -d > res/Data/Data_CH003_000.abf
          echo '${{secrets.DATA4}}' | base64 -d > res/Data/Data_CH004_000.abf
          echo '${{secrets.EDH}}' | base64 -d > res/Data/Data.edh

      - name: Test with pytest
        run: |
          cd src
          pytest

  create_bundle:
    needs: build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: create bundle
        run: |
          pyinstaller --onefile --windowed src/main.py

      - name: rename bundle
        run: |
          if [ "$(uname)" == "Darwin" ]; then
          # Do something under Mac OS X platform   
          mv dist/main dist/eda_macos
          elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
          # Do something under GNU/Linux platform
          mv dist/main dist/eda_linux
          elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
          # Do something under 32 bits Windows NT platform
          ren dist/main dist/eda_win32
          elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
          # Do something under 64 bits Windows NT platform
          ren dist/main dist/eda_win64
          fi

      - uses: actions/upload-artifact@v3
        with:
          name: bundles
          path: dist/


  pre-release:
    name: "Pre Release"
    needs:   create_bundle
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: bundles
          path: dist/

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            dist/eda_linux
            dist/eda_macos
