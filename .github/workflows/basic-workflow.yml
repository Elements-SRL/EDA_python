name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.x"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          cd src
          pytest

  create_bundles:
    needs: build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies on unix systems
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install dependencies on windows systems
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pyinstaller
          if (Test-Path -path requirements.txt){ pip install -r requirements.txt }

      - name: create windows bundle
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed src/main.py -n eda_win.exe

      - name: create macos bundle
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --windowed src/main.py -n eda_macos

      - name: create linux bundle
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --onefile --windowed src/main.py -n eda_linux

      - uses: actions/upload-artifact@v3
        with:
          name: bundles
          path: dist/

  pre-release:
    name: "Pre Release"
    needs: create_bundles
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: bundles
          path: dist/

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            dist/eda_linux
            dist/eda_macos
            dist/eda_win.exe

  clean-up:
    name: "Clean up"
    needs: pre-release
    runs-on: "ubuntu-latest"

    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: bundles
