name: Python package

on: [ push ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.x" ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          export PYTHONPATH="$PYTHONPATH:$HOME/EDA_python"
          pytest

  create_bundles:
    # needs: build
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies on unix systems
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install dependencies on windows systems
        if: matrix.os == 'windows-latest'
        run: |
          py -m pip install --upgrade pip
          py -m pip install pyinstaller
          py -m pip install -r requirements.txt
          cd \EDA_python
          set PYTHONPATH=%cd%
          py -m PyInstaller --onefile --windowed src\main.py --icon=res\icon\logo.ico -n eda_win.exe
        shell: cmd
        
      - name: sign windows app
        if: matrix.os == 'windows-latest'
        uses: GabrielAcostaEngler/signtool-code-sign@main
        with:
          certificate: '${{ secrets.CERTIFICATE }}'
          cert-password: '${{ secrets.PASSWORD }}'
          cert-sha1: '${{ secrets.CERTHASH }}'
          cert-description: 'foo'
          folder: 'dist/'
          recursive: true
          timestamp-server: 'http://timestamp.digicert.com'

      # - name: create windows bundle
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     cd \EDA_python
      #     set PYTHONPATH=%cd%
      #     cd ..
      #     echo %PYTHONPATH%
      #     py -m pyinstaller --onefile --windowed src\main.py -n eda_win.exe
      #   shell: cmd
#
#      - name: create macos bundle
#        if: matrix.os == 'macos-latest'
#        run: |
#          export PYTHONPATH="$PYTHONPATH:$HOME/EDA_python"
#          pyinstaller --onefile --windowed src/main.py -n eda_macos
#
      
      - name: create linux bundle
        if: matrix.os == 'ubuntu-latest'
        run: |
          export PYTHONPATH="$PYTHONPATH:$HOME/EDA_python"
          pyinstaller --onefile --windowed src/main.py -n eda_linux

      - uses: actions/upload-artifact@v3
        with:
          name: bundles
          path: dist/

  pre-release:
    name: "Pre Release"
    needs: create_bundles
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: bundles
          path: dist/

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            dist/eda_linux
            dist/eda_win.exe
#            dist/eda_macos

  clean-up:
    name: "Clean up"
    needs: pre-release
    runs-on: "ubuntu-latest"

    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: bundles
